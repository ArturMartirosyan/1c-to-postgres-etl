# etl_1c_to_postgres.py
import json
import pandas as pd
from sqlalchemy import create_engine
from datetime import datetime

# üîπ 1. –ò–ó–í–õ–ï–ß–ï–ù–ò–ï (Extract) ‚Äî —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–° (JSON)
def extract_1c_data(file_path):
    print("üîπ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ 1–°...")
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    df = pd.DataFrame(data)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
    return df

# üîπ 2. –û–ë–†–ê–ë–û–¢–ö–ê (Transform) ‚Äî –æ—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
def transform_data(df):
    print("üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–∏–≤–µ–¥—ë–º –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É datetime
    df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'])
    
    # –°—É–º–º–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏? –ü—Ä–∏–≤–µ–¥—ë–º –∫ float
    df['–°—É–º–º–∞'] = df['–°—É–º–º–∞'].astype(str).str.replace(' ', '').astype(float)
    
    # –î–æ–±–∞–≤–∏–º –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    df['–ì–æ–¥'] = df['–î–∞—Ç–∞'].dt.year
    df['–ú–µ—Å—è—Ü'] = df['–î–∞—Ç–∞'].dt.month
    df['–í—ã—Ä—É—á–∫–∞'] = df['–°—É–º–º–∞']
    df['–°—Ä–µ–¥–Ω—è—è_—Ü–µ–Ω–∞'] = df['–°—É–º–º–∞'] / df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
    
    # –£–±–µ—Ä—ë–º –¥—É–±–ª–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    df.drop_duplicates(inplace=True)
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    return df

# üîπ 3. –ó–ê–ì–†–£–ó–ö–ê (Load) ‚Äî –≤ PostgreSQL
def load_to_postgres(df, table_name='sales'):
    print("üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ PostgreSQL...")
    
    # üîß –ù–∞—Å—Ç—Ä–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∏–∑–º–µ–Ω–∏ –ø–æ–¥ —Å–µ–±—è)
    DATABASE_URL = "postgresql://user:password@localhost:5432/analytics"
    
    try:
        engine = create_engine(DATABASE_URL)
        df.to_sql(table_name, engine, if_exists='append', index=False, method='multi')
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}")

# üîπ 4. –û–°–ù–û–í–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ ETL-–ø–∞–π–ø–ª–∞–π–Ω–∞: 1C ‚Üí PostgreSQL")
    
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ 1–°
        file_path = '1c_sales.json'
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ETL
        raw_data = extract_1c_data(file_path)
        cleaned_data = transform_data(raw_data)
        load_to_postgres(cleaned_data, table_name='sales')
        
        print("üéâ ETL-–ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        print("\nüìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:")
        print(cleaned_data.head())
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")